@using TietoCRM.Extensions;
<form>
    <div class="col-md-12">
        <div class="form-group">
            <label for="crm-select-customer">Customer:</label>
            <select name="customer" id="crm-select-customer" class="form-inline selectpicker" data-live-search="true">
                @foreach (String Customer in ViewBag.Customers)
                {
                    <option value="@Customer">@Customer</option>
                }
            </select>
            <button type='button' class='btn btn-default form-inline' data-toggle="modal" id='appointment-modal-button' onclick="openModal();">Appointment</button>
            <button type='button' class='btn hidden btn-warning form-inline' data-toggle="modal" id='remind-modal-button' onclick="loadReminders()">Reminder</button>
        </div>
    </div>
    <table draggable="true" id="@ViewBag.ControllerName-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="name" data-sort-order="desc">
        <thead>
            <tr>
                <th data-field="#" data-sortable="false">#</th>
                @foreach (System.Reflection.PropertyInfo property in ViewBag.Properties)
                {
                    if (@property.Name != "SSMA_timestamp" && !property.Name.StartsWith("_") && @property.Name != "Customer")
                    {
                        String PropertyName = property.Name.Replace("_", " ");
                        <th data-field="@property.Name" data-sortable="true">@PropertyName</th>
                    }
                }
            </tr>
        </thead>
    </table>
    <div class="bottom-wrapper" style="margin-top:30px; margin-bottom:30px">
        <div id='crm-edit-contact' class='crm-table-btn'>
            <button type='button' class='btn btn-default' data-toggle="modal" id="contact-modal-button" onclick="loadContactData()">Edit contact</button>
        </div>

    </div>
</form>

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="reminderModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog reminders-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Reminders on customer</h4>
            </div>
            <div id="reminder-modal" class="modal-body">
                <form class="form-inline" id="reminders-form">
                    <table class="table table-striped table-bordered" id="reminder-table">
                        <thead>
                            <tr>
                                <th>Start date</th>
                                <th>Reminder text</th>
                                <th>Sign</th>
                                <th>Deactivate</th>
                            </tr>
                        </thead>
                        <tbody class="reminder-body"></tbody>
                    </table>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-reminders" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="contactModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Edit Contact</h4>
            </div>
            <div id="contact-modal" class="modal-body">
                <div class="form-inline">
                    <select id="crm-contact-select" class="form-control"></select>
                </div>
                <br />
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="fullName3" class="col-sm-2 control-label">Full name</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Contact_person" id="fullName3" placeholder="Full name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-2 control-label">Email</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Email" id="inputEmail3" placeholder="Email">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber3" class="col-sm-2 control-label">Phone number</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="phoneNumber3" placeholder="Phone number">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="mobileNumber3" class="col-sm-2 control-label">Mobile number</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="mobileNumber3" placeholder="Mobile number">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="address3" class="col-sm-2 control-label">Address</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="address3" placeholder="Address">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="notes3" class="col-sm-2 control-label">Notes</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="notes3" placeholder="Notes">
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom:-5px">
                        <div class="col-sm-offset-2 col-sm-10">
                            <button id="create-contact-button" class="btn btn-default">Create</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-contact-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="appointmentModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog appointment-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Create Appointment</h4>
            </div>
            <div id="appointment-modal" class="modal-body">
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="Text" class="col-sm-2 control-label">Text</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Text" id="text" placeholder="Text">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="date" class="col-sm-2 control-label">Date</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Date" id="date" placeholder="Date">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Event_type" class="col-sm-2 control-label">Event type</label>
                        <div class="col-sm-10">
                            <input type="search" class="form-control" name="Event_type" id="eventType" placeholder="Event type">
                        </div>
                    </div>
                </form>
                <button type="button" id="create-appointment" class="btn btn-primary">Create</button>
                <table class="table table-striped table-bordered" id="appointment-table">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Text</th>
                            <th>Event type</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody class="appointment-body">
                        @foreach(TietoCRM.Models.view_Appointment app in ViewBag.Appointments){
                        <tr>
                            <td class='appointment-customer'>@app.Customer</td>
                            <td class='appointment-text'>@app.Text</td>
                            <td class='appointment-event-type'>@app.Event_type</td>
                            <td class='appointment-date'>@app.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="newRowModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">New contract</h4>
            </div>
            <div id="new-contract-modal" class="modal-body">

                <form class="form-horizontal">
                    <table style="width: 100%;">
                        <tr>
                            @{
                                int count = 0;
                                foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                                {
                                    if (pi.Name != "SSMA_timestamp" && pi.Name != "Sign" && !pi.Name.StartsWith("_") && pi.Name != "Contract_id" && pi.Name != "Created" && pi.Name != "Updated" && pi.Name != "Resigned_contract")
                                    {

                                        String pName = pi.Name.Replace("_", " ");

                                        if(count == 1 || count == 8)
                                        {
                                            @Html.Raw("<td>")
                                        }
                                            


                                        <div class="form-group">
                                            <label for="@pi.Name.ToLower()-text" style="font-size: 12px" class="col-sm-3 control-label">@pName</label>
                                            <div class="col-sm-9">
                                                @if (pi.PropertyType == typeof(bool?))
                                                {
                                                    <select class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                        <option value="true">true</option>
                                                        <option value="false">false</option>
                                                    </select>
                                                }
                                                else if (pi.Name == "Status")
                                                {
                                                    <select class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                        @foreach (String status in ViewBag.Statuses)
                                                        {
                                                            <option value="@status">@status</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Contract_type")
                                                {
                                                    <select class="form-control" id="@pi.Name.ToLower()-select" name="@pi.Name">
                                                        @foreach (String types in ViewBag.ContractTypes)
                                                        {
                                                            <option value="@types">@types</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Contact_person" || pi.Name == "Main_contract_id")
                                                {
                                                    <select class="form-control" id="@pi.Name.ToLower()-select" name="@pi.Name"></select>
                                                }
                                                else
                                                {
                                                    String inputType = "";
                                                    String inputVal = "";
                                                    if (pi.PropertyType == typeof(DateTime?))
                                                    {
                                                        inputType = "date";
                                                        if (pi.Name == "Valid_through")
                                                        {
                                                            inputVal = DateTime.Now.AddYears(3).ToShortDateString();
                                                        }
                                                        else
                                                        {
                                                            if (pi.Name == "Expire")
                                                            {
                                                                inputVal = "";
                                                            }
                                                            else
                                                            { 
                                                                inputVal = DateTime.Now.AddMonths(3).ToShortDateString();
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        inputType = "text";
                                                    }
                                                    <input class="form-control" type="@inputType" id="@pi.Name.ToLower()-@inputType" name="@pi.Name" placeholder="@pName" value="@inputVal" />
                                                }

                                            </div>
                                        </div>
                                        if(count == 7 || count == ViewBag.Properties.Length -1)
                                        {
                                            @Html.Raw("</td>")
                                        }
                                    }
                                    count++;
                                }
                            }
                        </tr>
                    </table>
                    
                </form>
            </div>
            <div class="modal-footer">
                @*<button type="button" id="set-defaults-btn" class="btn btn-default">Set defaults</button>*@
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="create-contract-btn" class="btn btn-primary">Save and Preview</button>
            </div>
        </div>
    </div>
</div>


<!--
    Script for new contract modal

    Script for new contract modal
-->
<script>

    var setDefaultValues = function(){
        //validator.resetForm();
        var myDate = new Date();
        var myDate3 = new Date();
        var myDate3m = new Date();
        myDate3.setYear(myDate3.getFullYear() + 3);
        myDate3m.setYear(myDate3m.getFullYear() + 3);
        myDate3m.setMonth(myDate3m.getMonth() - 3);
        $("#observation-date").prop("disabled",false);
        $("#status-text").val("Sänt");


        if ($("#contract_type-select").val() == "Modulavslut")
        {
            $("#main_contract_id-select").prop("disabled",true);
            $("#main_contract_id-select").val("");
            $("#valid_through-date").val("");
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#observation-date").val("");
            $("#term_of_notice-text").val("");
            $("#option_date-date").val("");
            $("#valid_through-date").prop("disabled",true);
            $("#expire-date").prop("disabled",true);
            $("#observation-date").prop("disabled",true);
            $("#term_of_notice-text").prop("disabled",true);
            $("#option_date-date").prop("disabled",true);
            $("#extension-text").prop("disabled",true);
        }

        if ($("#contract_type-select").val() == "Tjänsteavtal" || $("#contract_type-select").val() == "Tilläggsavtal")
        {
            $("#main_contract_id-select").prop("disabled",false);
            $("#main_contract_id-select").val("");
            $("#valid_through-date").val("");
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#observation-date").val("");
            $("#term_of_notice-text").val("");
            $("#option_date-date").val("");
            $("#valid_through-date").prop("disabled",false);
            $("#expire-date").prop("disabled",false);
            $("#observation-date").prop("disabled",false);
            $("#term_of_notice-text").prop("disabled",false);
            $("#option_date-date").prop("disabled",false);
            $("#extension-text").prop("disabled",false);
        }

        if ($("#contract_type-select").val() == "Huvudavtal" || $("#contract_type-select").val() == null) {
            $("#contract_type-select").val("Huvudavtal");
            $("#main_contract_id-select").prop("disabled","disabled");
            $("#main_contract_id-select").val("");
            $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#term_of_notice-text").val("3");
            $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate3m));
            $("#option_date-date").val("");
            $("#valid_through-date").prop("disabled",false);
            $("#expire-date").prop("disabled",false);
            $("#observation-date").prop("disabled",false);
            $("#term_of_notice-text").prop("disabled",false);
            $("#option_date-date").prop("disabled",false);
            $("#extension-text").prop("disabled",false);
        }
    }

    var checkReminder = function(customer){
        $.ajax({
            "url": "/CustomerOffer/checkReminder/",
            "type": "POST",
            "data": {
                "customer": customer
            },
            "success": function(data){
                if (data == "1") {
                    $("#remind-modal-button").show();
                }
                else {
                    $("#remind-modal-button").hide();
                }
            }
        });
    }

    var reCalcObservationDate = function(){
        if (!isNaN($("#term_of_notice-text").val())) {      // Om Term Of Notice är numeriskt (Not icke-numeriskt)
            if (isNaN($("#valid_through-date").val())) {    //Om inte valid_through är numeriskt (dvs ett datum) ska det beräknas
                var myDate = new Date($("#valid_through-date").val());
                myDate.setMonth(myDate.getMonth() - $("#term_of_notice-text").val());
                $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            }
            else {
                if (isNaN($("#expire-date").val())) {    //Om inte Expire är numeriskt (dvs ett datum) ska det beräknas
                    var myDate = new Date($("#expire-date").val());
                    myDate.setMonth(myDate.getMonth() - $("#term_of_notice-text").val());
                    $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
                }
            }
        }
    }

    $("#expire-date").change(function(){
        var myDate = new Date();
        var myDate3 = new Date();
        var myDate3m = new Date();
        myDate3.setYear(myDate3.getFullYear() + 3);
        myDate3m.setMonth(myDate3.getMonth() + 3);
        if (isNaN($("#expire-date").val())) {
            $("#valid_through-date").val("");
            $("#term_of_notice-text").val("");
        }
        else {
            $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
            $("#term_of_notice-text").val("3");
            $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate3m));
        }
    });

    $("#term_of_notice-text").change(function(){
        reCalcObservationDate();
    });

    $("#valid_through-date").change(function(){
        reCalcObservationDate();
    });

    $("#contract_type-select").change(function(){
        setDefaultValues();
        //var myDate = new Date();
        //var myDate3 = new Date();
        //myDate3.setYear(myDate3.getFullYear() + 3);
        //if($(this).val() == "Huvudavtal"){
        //    $("#main_contract_id-select").prop("disabled","disabled");
        //    $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
        //    $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
        //}
        //else {
        //    $("#main_contract_id-select").prop("disabled",false);
        //    $("#valid_through-date").val("");
        //    $("#valid_from-date").val("");
        //}
    });

    var $customerSelect = $("#crm-select-customer");
    var loadMainContracts = function() {
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetMainContracts/")",
            "type": "POST",
            "data": {
                "customer": $customerSelect.val()
            },
            "success": function(data){
                mainIds = JSON.parse(data);
                $select = $("#main_contract_id-select");
                $select.html("");


                for(var i = 0; i < mainIds.length; i++)
                {
                    var mainID = mainIds[i];
                    $select.append($("<option></option>").attr("value", mainID).html(mainID));

                }
                $select.prepend("<option value=''></option>").val("");

            }
        });
    }

    var loadNewContactData = function()
    {
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetContacts/")",
            "type": "POST",
            "data": {
                "customer": $customerSelect.val()
            },
            "success": function(data){
                currentPerson = JSON.parse(data);
                $select = $("#contact_person-select");
                $select.html("");


                for(var i = 0; i < currentPerson.length; i++)
                {
                    var person = currentPerson[i];
                    $select.append($("<option></option>").attr("innerText", person.Contact_person).html(person.Contact_person));

                }
                //$select.append("<option value='none'>None</option>");

            }
        });
    }

    $("#set-defaults-btn").click(function(){
        $("#contract_type-select").val("Huvudavtal");
        $("#extension-text").val("");
        setDefaultValues();
    });

    $("#create-appointment").click(function(){
        $("#appointmentModal form").find(":input");
        var newAppointment = {}
        var $formInputs = $("#appointmentModal form").find(":input");
        var frmInpLen = $formInputs.length;
        for (var i = 0; i < frmInpLen; i++) {
            var $currInput = $($formInputs[i]);
            newAppointment[$currInput.attr("name")] = $currInput.val();
        }

        $.ajax({
            "url": "@Url.Content("~/CustomerContract/InsertAppointment/")",
            "type": "POST",
            "data": {
                "customer": $contactSelect.val(),
                "json": JSON.stringify(newAppointment)
            },
            "success": function(data){
                if(data >= 0){
                    loadAppointments();
                    triggerAlert("Successfully created an appointment.", "success");
                }
                else{
                    triggerAlert("failed to create an appointment.", "warning");
                }
            }
        });
    });

    var loadAppointments = function()
    {
        $.ajax({
            "url": "/CustomerContract/GetAppointments/",
            "type": "POST",
            "data": {
                "customer": $contactSelect.val()
            },
            "success": function(data){
                insertAppointmentToHtml(JSON.parse(data));
            }
        });
    }

    var insertAppointmentToHtml = function(json){
        $newRows = $(".appointment-body");
        $newRows.empty();
        $newRows.html("");
        $newRows.append("<tbody>");
        for(var i = 0; i < json.length; i++)
        {
            var appointment = json[i];

            var $row = $("<tr>                                                                                                \
                                    <td class='appointment-customer'>" + appointment.Customer + "</td>                                   \
                                    <td class='appointment-text'>" + appointment.Text + "</td>         \
                                    <td class='appointment-event-type'>" + appointment.Event_type + "</td>         \
                                    <td class='appointment-date'>" + appointment.Date + "</td>         \
                                </tr>");
            $newRows.append($row);
        }
        $newRows.append("<tbody>");
    }

    $("#create-contract-btn").click(function(){

        if ($("#new-contract-modal form").valid()) {
        var newContract = {}

        var $formInputs = $("#newRowModal form").find(":input");
        var frmInpLen = $formInputs.length;
        for (var i = 0; i < frmInpLen; i++) {
            var $currInput = $($formInputs[i]);
            newContract[$currInput.attr("name")] = $currInput.val();
            triggerAlert("Successfully created a new appointment.", "success");
        }
        newContract["Sign"] = "@Html.Raw(System.Web.HttpContext.Current.GetUser().Sign)";

            $.ajax({
                "url": "@Url.Content("~/CustomerContract/Insert/")",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(newContract)
                },
                "success": function(data){
                    if(data != "0" || data != "-1"){
                        updateDataTable($("#crm-select-customer").val(), function(){
                            drawButtons();
                            $("#crm-add-row").click(function(){
                                loadNewContactData();
                                loadCustomer();
                                loadMainContracts();
                                console.log(1);
                                setDefaultValues();
                                $("#newRowModal").appendTo("body").modal("show").draggable();
                            });
                        });
                        console.log("success");
                        triggerAlert("Successfully added new contract.", "success");
                        $("#newRowModal").modal("toggle");

                        window.history.pushState(null,null,["Index?contract-id=" + data + "&customer=" + newContract.Customer ]);

                        window.location = "ViewPdf?contract-id=" + data + "&customer=" + newContract.Customer;

                    }
                    else {
                        triggerAlert("Failed to add new contract.", "warning");
                        console.log("fail");
                    }
                }
            });
        }
    });
</script>

<!--
    Script for contact modal
-->
<script>
    var currentPerson;
    var $contactSelect = $("#crm-select-customer");
    $("#contact-modal-button").click(function(){
        $("#contactModal").appendTo("body").modal("show").draggable();
    });
    var loadContactData = function()
    {
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetContacts/")",
            "type": "POST",
            "data": {
                "customer": $("#crm-select-customer").val()
            },
            "success": function(data){
                currentPerson = JSON.parse(data);
                $select = $("#crm-contact-select");
                $select.html("");

                $button = $("#create-contact-button");


                for(var i = 0; i < currentPerson.length; i++)
                {
                    var person = currentPerson[i];
                    $select.append($("<option></option>").attr("value", JSON.stringify(person)).html(person.Contact_person));
                    if(i == 0)
                    {
                        changePersonToShow(person);
                    }

                }
                $select.append("<option new-person='true'>New person</option>");

                if($select.children().length > 1)
                    $button.hide();
                else
                    $button.show();

            }
        });
    }
    $("#crm-contact-select").change(function(){
        $option = $(this).find("option:selected");
        if(typeof $option.attr("new-person") == "undefined")
        {
            $("#create-contact-button").hide();
            changePersonToShow(JSON.parse(this.value), $option);
        }
        else
        {
            $("#create-contact-button").show();
            changePersonToShow("", $option);
        }
    });

    $("#remind-modal-button").click(function(){
        $("#reminderModal").appendTo("body").modal("show").draggable();
    });
    var loadReminders = function()
    {
        $.ajax({
            "url": "/CustomerOffer/GetReminders/",
            "type": "POST",
            "data": {
                "customer": $("#crm-select-customer").val()
            },
            "success": function(data){
                reminders = JSON.parse(data);

                $newRows = $(".reminder-body");
                $newRows.empty();
                $newRows.html("");
                $newRows.append("<tbody>");
                for(var i = 0; i < reminders.length; i++)
                {
                    var remind = reminders[i];

                    var $row = $("<tr>                                                                                                \
                                    <td class='startdat'>" + remind.Start_date + "</td>                                   \
                                    <td class='remtext'>" + remind.Reminder_text + "</td>         \
                                    <td class='sign'>" + remind.Sign + "</td>         \
                                    <td class='deactivate'><input data-id=" + remind.ID_PK + " class='ch-deact' type='checkbox' /></td>         \
                                </tr>");
                    $newRows.append($row);
                }
                $newRows.append("<tbody>");
            }
        });
    }

    $("#save-reminders").click(function(){
        var $inputs = $("#reminderModal #reminder-table").find("input:checked");
        var length = $inputs.length;
        for(var i = 0; i < length; i++){
            $input = $($inputs[i]);
            var id = $input.attr("data-id");
            $.ajax({
                "url": "/CustomerOffer/DeactivateReminder/",
                "type": "POST",
                "data": {
                    "id_pk": id
                },
                "success": function(data){
                
                }
            });
        }
        $("#reminderModal").modal("hide");
        checkReminder($("#crm-select-customer").val());
        triggerAlert("Successfully deactivated reminders", "success");
    });

    var changePersonToShow = function(person, $option)
    {
        if(typeof $option != "undefined")
        {
            if(typeof $option.attr("new-person") == "undefined")
            {
                $("#fullName3").val($("<div>").html(person.Contact_person).text());
                $("#inputEmail3").val(person.Email);
                $("#phoneNumber3").val(person.Telephone);
                $("#mobileNumber3").val(person.Mobile);
                $("#address3").val(person.Address);
                $("#notes3").val($("<div>").html(person.Notes).text());
            }
            else
            {
                $("#fullName3").val("");
                $("#inputEmail3").val("");
                $("#phoneNumber3").val("");
                $("#mobileNumber3").val("");
                $("#address3").val("");
                $("#notes3").val("");
            }
        }
        else
        {
            $("#fullName3").val($("<div>").html(person.Contact_person).text());
            $("#inputEmail3").val(person.Email);
            $("#phoneNumber3").val(person.Telephone);
            $("#mobileNumber3").val(person.Mobile);
            $("#address3").val(person.Address);
            $("#notes3").val($("<div>").html(person.Notes).text());
        }
    }
    $("#create-contact-button").click(function(e){
        if ($("#contactModal form").valid())
        {
            e.preventDefault();
            var person = {}
            $option = $("#crm-contact-select").find("option:selected");

            person.Customer = $contactSelect.val();
            person.Contact_person = $("#fullName3").val();
            person.Email = $("#inputEmail3").val();
            person.Telephone = $("#phoneNumber3").val();
            person.Address = $("#address3").val();
            person.Mobile = $("#mobileNumber3").val();
            person.Notes = $("#notes3").val();
            person.Title = "";

            $.ajax({
                "url": "@Url.Content("~/CustomerOffer/InsertContact/")",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(person)
                },
                "success": function(data){
                    if(data > 0)
                    {
                        $select = $("#crm-contact-select");
                        json = JSON.stringify(person);
                        $select.prepend($("<option></option>").attr("value", json).html(person.Contact_person));
                        $select.val(json);
                        triggerAlert("Successfully added contact.", "success");
                        console.log("success");
                    }
                    else
                    {
                        triggerAlert("Failed to add contact.", "warning");
                        console.log("failure");
                    }
                }
            });
        }
    });


    $("#save-contact-changes").click(function(){
        $option = $("#crm-contact-select").find("option:selected");
        if(typeof $option.attr("new-person") == "undefined")
        {
            if ($("#contactModal form").valid())
            {
                var oldPerson = JSON.parse($option.val());
                var person = {}

                person.oldName = oldPerson.Contact_person;
                person.oldEmail = oldPerson.Email;
                if(selectedId != null)
                    person. contractNumber = selectedId;
                person.Customer = $contactSelect.val();
                person.Contact_person = $("#fullName3").val();
                person.Email = $("#inputEmail3").val();
                person.Telephone = $("#phoneNumber3").val();
                person.Address = $("#address3").val();
                person.Mobile = $("#mobileNumber3").val();
                person.Notes = $("#notes3").val();
                person.Title = "";

                $.ajax({
                    "url": "@Url.Content("~/CustomerContract/SaveContact/")",
                    "type": "POST",
                    "data": {
                        "json": JSON.stringify(person),
                        "id": selectedId
                    },
                    "success": function(data){
                        if(data > 0)
                        {
                            updateDataTable($("#crm-select-customer").val());
                            drawButtons();
                            selectedId = null;
                            console.log("success");
                            triggerAlert("Successfully updated contact.", "success");
                            $("#contactModal").modal("toggle");
                        }
                        else
                        {
                            triggerAlert("Failed to update contact.", "warning");
                            console.log("failure");
                        }
                    }
                });
            }

        }
    });

</script>

<!--
    Script for main page
-->
<script>
        var selectedId;
        var onSuccess = function(data, textStatus, jqxhr, $row){
            if(data > 0)
            {
                $@{@ViewBag.ControllerName}Table.row( $row )
                .remove()
                .draw();
                $(document).trigger("clear-alerts");
                $(document).trigger("add-alerts", [
                  {
                      'message': 'Row successfully deleted!',
                      'priority': 'success'
                  }
                ]);
            }
        }

    var openModal = function(){
        $("#appointmentModal").appendTo("body").modal("show").draggable();
    }
    var selectedContract = {};
        var selectRow = function(element){
            var $td = $(element);
            var $row = $(element).parent();
            var $table = $("#CustomerContract-table");

            $td.find("input").prop("checked", true);

            selectedId = $td.find("input").val();
            if(selectedId !== null)
                generateSelectedContract($row);
            $table.find("tr.selected").removeClass("selected");
            $row.addClass("selected");

            var $selRowContainer = $("#CustomerContract-table_wrapper").find(".row").first().find(".col-sm-6").first();
            $button = $selRowContainer.find("#crm-delete-contract");
            if(selectedContract.Status == "Makulerat" && $button.length == 0){
                $selRowContainer.append("<div id='crm-delete-contract' class='crm-table-btn'><button type='button' class='btn btn-danger'>Remove</button></div>");
                $selRowContainer.find("#crm-delete-contract").bind("click", function(){
                    bootbox.dialog({
                        title: 'Do you want to delete this contract?',
                        message: "You are about to delete the selected contract",
                        buttons: {
                            'yes': {
                                label: 'Yes',
                                className: 'btn-danger pull-right',
                                callback: function () {
                                    $.ajax({
                                        "url": "/CustomerContract/DeleteContract/",
                                        "type": "POST",
                                        "data": {
                                            "id": selectedContract.Contract_id
                                        },
                                        "success": function(data){
                                            if(data > 0)
                                            {
                                                updateDataTable($("#crm-select-customer").val());
                                                //checkReminder($("#crm-select-customer").val());
                                                drawButtons();
                                                selectedId = null;
                                                triggerAlert("Successfully deleted contract.", "success");
                                            }
                                            else
                                            {
                                                triggerAlert("Failed to delete contract.", "warning");
                                            }
                                        }
                                    });
                                }
                            },
                            'no': {
                                label: 'No',
                                className: 'pull-right',
                            }
                        },
                    });
                });
            }
            else if($button.length != 0 && selectedContract.Status != "Makulerat"){
                $selRowContainer.find("#crm-delete-contract").remove();
            }
        }

        var generateSelectedContract = function($selectedRow){
            selectedContract.Contract_id = $selectedRow.find("td:nth-child(2)").html();
            selectedContract.Customer = $selectedRow.find('[data-data="Customer"]').html();
            selectedContract.Contract_type = $selectedRow.find('[data-data="Contract_type"]').html();
            selectedContract.Term_of_notice = $selectedRow.find('[data-data="Term_of_notice"]').html();
            selectedContract.Status = $selectedRow.find('[data-data="Status"]').html();
            selectedContract.Valid_from = $selectedRow.find('[data-data="Valid_from"]').html();
            selectedContract.Valid_through = $selectedRow.find('[data-data="Valid_through"]').html();
            selectedContract.Main_contract_id = $selectedRow.find('[data-data="Main_contract_id"]').html();
            selectedContract.Extension = $selectedRow.find('[data-data="Extension"]').html();
            selectedContract.Expire = $selectedRow.find('[data-data="Expire"]').html();
            selectedContract.Observation = $selectedRow.find('[data-data="Observation"]').html();
            selectedContract.Note = $selectedRow.find('[data-data="Note"]').html();
            selectedContract.Contact_person = $selectedRow.find('[data-data="Contact_person"]').html();
            selectedContract.Created = $selectedRow.find('[data-data="Created"]').html();
            selectedContract.Updated = $selectedRow.find('[data-data="Updated"]').html();
            selectedContract.Option_date = $selectedRow.find('[data-data="Option_date"]').html();
            selectedContract.Sign = $selectedRow.find('[data-data="Sign"]').html();
            selectedContract.Resigned_contract = $selectedRow.find('[data-data="Resigned_contract"]').html();
            console.log(selectedContract);
        }
        var uniqueRowNumber = 0;
        var drawCallBack = function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {

            var i = 0, j = 0;
            var insertValue;

            for (var name in aData) {

                var $td;

                if(i == 0)
                {
                    $td = $('td:eq(' + i + ')', nRow);

                    $td.parent().click(function () {

                        selectRow(this.firstChild);

                    });

                    var object = {Contract_id: aData["Contract_id"], Customer: aData["Customer"]}
                    $td.html("<input type='radio' value='" + aData["Contract_id"] + "' name='selected-contract' onClick=''/>");
                    if ($td.parent().hasClass("selected") && $td.find("input").val() == selectedId) {
                        selectRow($td);
                    }
                    else if ($td.parent().hasClass("selected") && $td.find("input").val() != selectedId) {
                        $td.parent().removeClass("selected");
                    }
                    i++;

                }
                else if (i >= 1) {
                    $td = $('td:eq(' + i + ')', nRow);
                    $td.attr("data-type", "select");
                    $td.attr("data-data", name);

                    // deleteRowFunction($td, dataObj);
                }


                i++;
            }
        }

        @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
        @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
        {

            if (@PropertyInfo.Name != "SSMA_timestamp" && !PropertyInfo.Name.StartsWith("_") && @PropertyInfo.Name != "Customer")
            {
                String PropertyName = PropertyInfo.Name.Replace("_", " ");
                DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
            }
        }

        @{DataObject = DataObject.Remove(DataObject.Length - 3);}
        var updateDataTable = function(customer, onSuccess)
        {
            console.log(customer);
            $('#@ViewBag.ControllerName-table').DataTable({
                "destroy": true,
                "processing": true,
                //"ajax": "/CustomerProductReport/CustomerData/",
                "ajax": {
                    "url": "@Url.Content("~/CustomerContract/CustomerContractJsonData/")",
                    "type": "POST",
                    "data": {
                        "customer": customer
                    }
                },
                "initComplete": function(settings, json) {
                    if(typeof onSuccess != "undefined")
                        onSuccess();
                },
                "defaultContent": "",
                "bPaginate": false,
                "bInfo" : false,
                //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
                "order": [[14, "desc"],[1, "asc"]],
                "columns": [@Html.Raw(DataObject)
                ],
                "columnDefs": [
                    {
                        "data": null,
                        "defaultContent": "",
                        "targets": 0
                    },
                    {
                        "width": "210px",
                        "targets": 1
                    },
                    {
                        "width": "210px",
                        "targets": 2
                    },
                    {
                        "width": "80px",
                        "targets": 4
                    },
                    {
                        "width": "70px",
                        "targets": 7
                    },
                    {
                        "width": "180px",
                        "targets": 9
                    },
                    {
                        "width": "70px",
                        "targets": 10
                    },
                    {
                        "width": "17%",
                        "targets": 12
                    },
                ],
                "scrollY": ($("#page-content-wrapper").height() - 170),
                "scrollX": true,
                "fnRowCallback": drawCallBack
            });
            checkReminder(customer);
            var $selRowContainer = $("#@ViewBag.ControllerName-table_length");
            //$selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Add row</button></div>");
            //$selRowContainer.append("<div id='crm-save-updates' class='crm-table-btn'><button type='button' id='crm-save-btn' class='btn btn-success' autocomplete='off'>Save</button></div>");
            //$('#crm-save-btn').on('click', save);
        }

        var loadCustomer = function()
        {
            var $formInputs = $("#newRowModal form").find(":input");
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if($currInput.attr("type") == "date"){

                    var today = new Date();
                    if($currInput.attr("name") == "Valid_through"){
                        today.setYear(today.getFullYear() + 3);
                    }
                    $currInput.val($.datepicker.formatDate('yy-mm-dd', today));

                }
                else if($currInput.attr("name") == "Term_of_notice"){
                    $currInput.val("3");
                }

            else {
                    $currInput.val("");
            }
        }

            $customer = $("#customer-text");
            $customer.attr("readonly",true);
            $customer.val($("#crm-select-customer").val());
        }

        function drawButtons()
        {
            var $selRowContainer = $("#CustomerContract-table_wrapper").find(".row").first().find(".col-sm-6").first();

            $selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
            $selRowContainer.append("<div id='crm-edit-contract' class='crm-table-btn'><button type='button' class='btn btn-default'>Preview</button></div>");

            $("#crm-edit-contract").bind("click", function(){
                //get selected item and add so the url is correct.
                if(typeof selectedId == "undefined" || selectedId == null)
                    triggerAlert("Select an item to edit", "info");
                else
                {   contract = selectedId;
                    //console.log(contract.Contract_id);
                window.history.pushState(null,null,["Index?contract-id=" + contract["Contract_id"] + "&customer=" + contract["Customer"] ]);
                    $input = $("#CustomerContract-table_filter").find(":input");
                    val = $input.val();

                    window.location = "ViewPdf?contract-id=" + contract + "&customer=" + $customerSelect.val() + "&search=" + val;
                }

                $("#crm-add-row").click(function(){
                    loadNewContactData();
                    loadCustomer();
                    loadMainContracts();
                    setDefaultValues();
                    $("#newRowModal").appendTo("body").modal("show").draggable();
                });

            });

        }
        $("#crm-add-row").click(function(){
            loadNewContactData();
            loadCustomer();
            loadMainContracts();
            console.log(1);
            setDefaultValues();
            $("#newRowModal").appendTo("body").modal("show").draggable();
        });
    $(document).ready(function () {

        $('.selectpicker').val('@Request["customer"]');
        $('.selectpicker').selectpicker('refresh');

        $customerSelect = $("#crm-select-customer");
        $customerSelect.change(function () {
            selectedId = null;
            loadAppointments();
            updateDataTable(this.value);
            drawButtons();
            $("#crm-add-row").click(function(){
                loadNewContactData();
                loadCustomer();
                loadMainContracts();
                setDefaultValues();
                $("#newRowModal").appendTo("body").modal("show").draggable();
            });
        });


        $formValidation = $("#newRowModal form").validate({
            ignore: ".ignore",
            rules: {
                "Term_of_notice": {
                    digits: true
                    //,
                    //required: true
                },
                "Valid_from": {
                    date: true
                },
                "Valid_through": {
                    date: true,
                },
                "Extension": {
                    digits: true
                    //,
                    //required: true
                },
                "Expire": {
                    date: true
                },
                "Observation": {
                    date: true,
                },
                //"Created": {
                //    date: true
                //    //,
                //    //required: true
                //},
                //"Updated": {
                //    date: true
                //},
                "Option_date": {
                    date: true,
                },
                "Contact_person": {
                    maxlength: 100,
                },
                "Main_contract_id": {
                    required: {
                            depends:function() {
                                if($("#contract_type-select").val() == "Tilläggsavtal") {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            }
                        }
                }
            },
            //messages:{
            //    "Main_contract_id": {
            //        required:  {
            //            depends:function() {
            //                if($("#contract_type-select").val() == "Tilläggsavtal") {
            //                    return "Required when 'Tilläggsavtal'";
            //                }
            //                else {
            //                    return "";
            //                }
            //            }
            //        }
            //    }
            //},
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });


        $formValidation = $("#contactModal form").validate({
            ignore: ".ignore",
            rules: {
                "Contact_person": {
                    required: true
                },
                "Email": {
                    email: true,
                    maxlength: 50,
                },
                "Telephone": {
                    maxlength: 20,
                },
                "Mobile": {
                    maxlength: 20,
                },
                "Address": {
                    maxlength: 100,
                },
                "Notes": {
                    maxlength: 255,
                }

            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });

        function get_browser() {
            var ua = navigator.userAgent,
                tem,
                M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            if (/trident/i.test(M[1])) {
                tem =/\brv[ :]+(\d+)/g.exec(ua) || [];
                return 'IE';
            }
            if (M[1] === 'Chrome') {
                tem = ua.match(/\bOPR\/(\d+)/)
                if (tem != null) {
                    return 'Opera'
                }
            }
            M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
            if ((tem = ua.match(/version\/(\d+)/i)) !=null) {
                M.splice(1,1,tem[1]);
            }
            return M[0];
        }

        console.log(get_browser());

        var webkit = get_browser() == "Chrome"  ||
            /iPad|iPhone|iPod/.test( navigator.userAgent )  ||
            get_browser() == "Opera";

        if(!webkit)
        {
            @{
            foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
            {

                if(pi.PropertyType == typeof(DateTime?))
                {
                    @Html.Raw("\t\t\t$('#" + pi.Name.ToLower() + "-date').datepicker();\n");
                }

            }
            }
        }
        $("#date").datetimepicker({
            dateFormat: 'yy-mm-dd'
        });




        $customerSelect.val("@Html.Raw(ViewBag.Customer)");
        updateDataTable("@Html.Raw(ViewBag.Customer)", function(){
            @Html.Raw("selectRow($(\"input[value='" + Request["contract-id"] + "'][type='radio'][name='selected-contract']\").parent());")
            drawButtons();
            if($customerSelect.val() == "")
            {
                $("#crm-add-row").unbind("click");
                console.log("unbind");
            }
            else
            {
                $("#crm-add-row").click(function(){
                    loadNewContactData();
                    loadCustomer();
                    loadMainContracts();
                    console.log(1);
                    setDefaultValues();
                    $("#newRowModal").appendTo("body").modal("show").draggable();
                });
            }
            $input = $("#CustomerContract-table_filter").find(":input");
            @Html.Raw("$input.val('" + Request["search"] + "');");
            $input.trigger($.Event("keyup", { keyCode: 13} ));
        });
    });
</script>