<table draggable="true" id="article-service-dependency-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="name" data-sort-order="desc">
    <thead>
        <tr>
            <th data-field="#" data-sortable="false">#</th>
            @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
            {
                String PropertyName = PropertyInfo.Name.Replace("_", " ");
                if (@PropertyName != "SSMA timestamp" && @PropertyName != "ID PK")
                {
                    <th data-field="@PropertyInfo.Name" data-sortable="true">@PropertyName</th>
                }

            }
        </tr>
    </thead>
</table>

@* Denna del beskriver editeringsformuläret som dyker upp när man trycker på Edit eller Create. Namn=Modal*@
<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="ArticleServiceDependencyModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Edit Article/Service Dependency</h4>
            </div>
            <div id="Dependency-modal" class="modal-body">
                <form class="form-horizontal">
                    @{
                        foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                        {
                            if (!pi.Name.Equals("ID_PK"))
                            {
                                String pName = pi.Name.Replace("_", " ");

                                <div class="form-group">
                                    <label for="@pi.Name.ToLower()-text" class="col-sm-2 control-label">@pName</label>
                                    <div class="col-sm-10">
                                        <input class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name" placeholder="@pName">
                                    </div>
                                </div>
                            }
                        }
                    }
                    
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-art-serv-dep-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
@*Slut på Modal*@

<script>
    var serverPrefix = "@Url.Content("~/")";
    //Sparar ändringar alternativ ny post
    var uploadToServer = function () {
        if (typeof $("#save-art-serv-dep-changes").attr("data-ArtServDependency") != "undefined") {

            var oldDependency = $("#save-art-serv-dep-changes").attr("data-ArtServDependency");

            var Dependency = {}

            var $formInputs = $("#ArticleServiceDependencyModal form").find(":input");
            console.log($formInputs);
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                Dependency[$currInput.attr("name")] = $currInput.val();
            }
            $.ajax({
                "url": serverPrefix + "ArticleServiceDependency/SaveDependency/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(Dependency),
                    "id_pk": oldDependency,
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        console.log("success");
                        $("#ArticleServiceDependencyModal").modal("hide");
                        triggerAlert("Successfully updated this Dependency", "success");
                    }
                    else {
                        console.log("failure");
                        triggerAlert("Something went wrong when trying to update the Dependency on the server", "warning");
                    }
                }
            });
        }
        else {
            var Dependency = {}

            var $formInputs = $("#Dependency-modal form").find(":input");
            console.log($formInputs);
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                Dependency[$currInput.attr("name")] = $currInput.val();
            }
            $.ajax({
                "url": serverPrefix + "ArticleServiceDependency/InsertDependency/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(Dependency),
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        console.log("success");
                        $("#ArticleServiceDependencyModal").modal("hide");
                        triggerAlert("Successfully inserted the new Dependency", "success");
                    }
                    else {
                        console.log("failure");
                        triggerAlert("Something went wrong when trying to insert the Dependency to the server", "warning");
                    }
                }
            });
        }
    }

    $(document).ready(function () {
        $("#save-art-serv-dep-changes").click(function () {
            if ($("#Dependency-modal form").valid()) {
                uploadToServer();
            }
        });

        $formValidation = $("#ArticleServiceDependencyModal form").validate({
            ignore: ".ignore",
            rules: {
//                "ID_PK": {
//                    required: true,
//                    maxlength: 3,
//                },
                "MinPopulation": {
                    required: true,
                    maxlength: 10,
                },
                "MaxPopulation": {
                    required: true,
                    maxlength: 10,
                },
            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });
    });
</script>



<script>
    var selectedId = null;

    var selectRow = function (element) {
        var $td = $(element);
        var $row = $(element).parent();
        var $table = $("#Dependency-table");

        $td.find("input").prop("checked", true);

        selectedId = $td.find("input").val();

        StateCookie.updateSite(null, selectedId);

        $table.find("tr.selected").removeClass("selected");

        $row.addClass("selected");
    }

    var handleStates = function () {
        var stateSearch = StateCookie.getCurrentSite().search;
        console.log(stateSearch);
        var $searchBox = $("#Dependency-table_filter").find(":input");

        if (stateSearch !== undefined) {
            $searchBox.val(String(stateSearch));
            $searchBox.trigger($.Event("keyup", { keyCode: 13 }));
        }

        $searchBox.bind('keyup', function () {
            StateCookie.updateSite($searchBox.val());
        });
    }

    @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
    @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
    {
        String PropertyName = PropertyInfo.Name.Replace("_", " ");
        if (@PropertyName != "SSMA timestamp" && @PropertyName != "ID PK")
        {
            DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
        }
    }
    @{DataObject = DataObject.Remove(DataObject.Length - 3);}
    var updateDataTable = function (onSuccess) {
        $('#Dependency-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "ArticleServiceDependency/DependencyJsonData/",
            },
            "initComplete": function (settings, json) {
                if (typeof onSuccess != "undefined")
                    onSuccess();
                handleStates();
                drawButtons();
            },
            "defaultContent": "",
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "order": [[1, "asc"]],
            "columns": [@Html.Raw(DataObject)
            ],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                }
            ],
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
        var $selRowContainer = $("#Dependency-table_length");
        //$selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Add row</button></div>");
        //$selRowContainer.append("<div id='crm-save-updates' class='crm-table-btn'><button type='button' id='crm-save-btn' class='btn btn-success' autocomplete='off'>Save</button></div>");
        //$('#crm-save-btn').on('click', save);
    }

    function drawButtons() {
        var $selRowContainer = $("#Dependency-table_wrapper").find(".row").first().find(".col-sm-6").first();

       

        $selRowContainer.append("<div id='create-Dependency-button' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
        $("#create-Dependency-button").bind("click", function () {
            $("#id_pk-text").removeAttr("readonly");
            $("#ArticleServiceDependencyModal").appendTo("body").modal("show").draggable();
            $("#save-art-serv-dep-changes").removeAttr("data-ArtServDependency");
            var $selectedTds = $("#Dependency-table tr.selected td").not(".radios");
            var tdLen = $selectedTds.length;

            var $formInputs = $("#ArticleServiceDependencyModal form").find(":input");

            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                for (var j = 0; j < tdLen; j++) {
                    var $currTD = $($selectedTds[j]);
                    if ($currTD.data("property") == $currInput.attr("name") && $currTD.data("property") != "id_pk") {
                        $currInput.val("");
                    }
                }
            }
        });

        $selRowContainer.append("<div id='crm-edit-Dependency' class='crm-table-btn'><button type='button' class='btn btn-default'>Edit</button></div>");
        $("#crm-edit-Dependency").bind("click", function () {
            if (selectedId != null) {
                $("#id_pk-text").prop("readonly", true);
                $("#save-art-serv-dep-changes").attr("data-ArtServDependency", selectedId);
                var $selectedTds = $("#Dependency-table tr.selected td").not(".radios");
                var tdLen = $selectedTds.length;

                var $formInputs = $("#ArticleServiceDependencyModal form").find(":input");

                var frmInpLen = $formInputs.length;
                for (var i = 0; i < frmInpLen; i++) {
                    var $currInput = $($formInputs[i]);
                    for (var j = 0; j < tdLen; j++) {
                        var $currTD = $($selectedTds[j]);
                        if ($currTD.data("property") == $currInput.attr("name")) {
                            $currInput.val($currTD.html());
                        }
                    }
                }
                $("#save-art-serv-dep-changes").attr("data-ArtServDependency", selectedId);
                $("#ArticleServiceDependencyModal").appendTo("body").modal("show").draggable();
            }
            else
                triggerAlert("You have to select a row to edit first.", "info");
        });

        $selRowContainer.append("<div id='delete-ArtServDep-button' class='crm-table-btn'><button type='button' class='btn btn-danger'>Delete</button></div>");
        $("#delete-ArtServDep-button").bind("click", function () {
            bootbox.dialog({
                title: 'Do you want to delete?',
                className: "crm-delete-confirm",
                message: "You are about to delete the selected dependency, are you sure you want to delete it?",
                buttons: {
                    'cancel': {
                        label: 'Cancel',
                        className: 'btn-default'
                    },
                    'yes': {
                        label: 'Yes',
                        className: 'btn-danger pull-right',
                        callback: function () {
                            $.ajax({
                                "url": serverPrefix + "ArticleServiceDependency/DeleteDependency/",
                                "type": "POST",
                                "data": {
                                    "id_pk": selectedId,
                                },
                                "success": function (data) {
                                    if (data > 0) {
                                        updateDataTable();
                                        console.log("success");
                                        triggerAlert("Successfully deleted row", "success");
                                    }
                                    else {
                                        console.log("failure");
                                        triggerAlert("Something went wrong when trying to delete this row", "warning");
                                    }
                                }
                            });
                        }
                    },
                    'no': {
                        label: 'No',
                        className: 'pull-right',
                    }
                },
            });
        });

        drawButtonsExtension($selRowContainer);
    }

    var triggerAlert = function (msg, priorty) {
        $(document).trigger("clear-alerts");
        $(document).trigger("add-alerts", [
          {
              'message': msg,
              'priority': priorty
          }
        ]);
    }

    var drawCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

        var i = 0, j = 0;
        var insertValue;
        var StateSelId = StateCookie.getCurrentSite().selectedId;
        for (var name in aData) {

            var i = 0;
            var insertValue;

            for (var name in aData) {
                var $td;


                if (i == 0) {
                    $td = $('td:eq(' + i + ')', nRow);

                    $td.parent().click(function () {

                        selectRow(this.firstChild);

                    });
                    $td.html("<input type='radio' value=" + aData["ID_PK"] + " name='selected-contact' onClick=''/>");
                    $td.addClass("radios");
                    if ($td.find("input").val() == StateSelId) {
                        selectRow($td);
                    }
                    else if ($td.find("input").val() != selectedId) {
                        $td.parent().removeClass("selected");
                    }
                    i++;
                }

                if (name != "ID_PK") {
                    if (i < 10) {
                        $td = $('td:eq(' + i + ')', nRow);
                        $td.attr("data-property", name);
                        $td.html(aData[name]);
                    }

                    i++;
                }
            }
        }
    }

    $('document').ready(function () {

        $('#Dependency-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "ArticleServiceDependency/DependencyJsonData/",
            },
            "initComplete": function (settings, json) {
                handleStates();
                drawButtons();
            },
            "defaultContent": "",
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "order": [[1, "asc"]],
            "columns": [@Html.Raw(DataObject)],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                }
            ],
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
    });


</script>
